// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "notes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class EnvelopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Envelope> {
} _Envelope_default_instance_;
class NoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Note> {
} _Note_default_instance_;

namespace protobuf_notes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, arrivaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, note_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, creationdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, type_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Envelope)},
  { 9, -1, sizeof(Note)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Envelope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Note_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "notes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Envelope_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Note_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Envelope_default_instance_.DefaultConstruct();
  _Note_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013notes.proto\022\010protocol\"\253\001\n\010Envelope\022%\n\004"
      "type\030\001 \001(\0162\027.protocol.Envelope.Type\022\023\n\013a"
      "rrivalTime\030\002 \001(\003\022\n\n\002id\030\003 \001(\003\022\034\n\004note\030\004 \003"
      "(\0132\016.protocol.Note\"9\n\004Type\022\021\n\rGET_ALL_NO"
      "TES\020\000\022\r\n\tSAVE_NOTE\020\001\022\017\n\013DELETE_NOTE\020\002\"i\n"
      "\004Note\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\024\n\014creat"
      "ionDate\030\003 \001(\003\022\017\n\007content\030\005 \001(\t\022 \n\004type\030\004"
      " \001(\0162\022.protocol.NoteType*0\n\010NoteType\022\t\n\005"
      "BASIC\020\000\022\014\n\010REMINDER\020\001\022\013\n\007SCRATCH\020\002B%\n\024co"
      "m.protobuf.exampleB\rNotesProtocolb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "notes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_notes_2eproto

const ::google::protobuf::EnumDescriptor* Envelope_Type_descriptor() {
  protobuf_notes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notes_2eproto::file_level_enum_descriptors[0];
}
bool Envelope_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Envelope_Type Envelope::GET_ALL_NOTES;
const Envelope_Type Envelope::SAVE_NOTE;
const Envelope_Type Envelope::DELETE_NOTE;
const Envelope_Type Envelope::Type_MIN;
const Envelope_Type Envelope::Type_MAX;
const int Envelope::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteType_descriptor() {
  protobuf_notes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notes_2eproto::file_level_enum_descriptors[1];
}
bool NoteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kTypeFieldNumber;
const int Envelope::kArrivalTimeFieldNumber;
const int Envelope::kIdFieldNumber;
const int Envelope::kNoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_notes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      note_(from.note_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&arrivaltime_, &from.arrivaltime_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&arrivaltime_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protocol.Envelope)
}

void Envelope::SharedCtor() {
  ::memset(&arrivaltime_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&arrivaltime_) + sizeof(type_));
  _cached_size_ = 0;
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:protocol.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_notes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Envelope& Envelope::default_instance() {
  protobuf_notes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Envelope)
  note_.Clear();
  ::memset(&arrivaltime_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&arrivaltime_) + sizeof(type_));
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Envelope.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::Envelope_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 arrivalTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arrivaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Note note = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_note()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Envelope.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int64 arrivalTime = 2;
  if (this->arrivaltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->arrivaltime(), output);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // repeated .protocol.Note note = 4;
  for (unsigned int i = 0, n = this->note_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->note(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.Envelope)
}

::google::protobuf::uint8* Envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Envelope.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int64 arrivalTime = 2;
  if (this->arrivaltime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->arrivaltime(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // repeated .protocol.Note note = 4;
  for (unsigned int i = 0, n = this->note_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->note(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Envelope)
  size_t total_size = 0;

  // repeated .protocol.Note note = 4;
  {
    unsigned int count = this->note_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->note(i));
    }
  }

  // int64 arrivalTime = 2;
  if (this->arrivaltime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->arrivaltime());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .protocol.Envelope.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const Envelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  note_.MergeFrom(from.note_);
  if (from.arrivaltime() != 0) {
    set_arrivaltime(from.arrivaltime());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  note_.InternalSwap(&other->note_);
  std::swap(arrivaltime_, other->arrivaltime_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_notes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Envelope

// .protocol.Envelope.Type type = 1;
void Envelope::clear_type() {
  type_ = 0;
}
::protocol::Envelope_Type Envelope::type() const {
  // @@protoc_insertion_point(field_get:protocol.Envelope.type)
  return static_cast< ::protocol::Envelope_Type >(type_);
}
void Envelope::set_type(::protocol::Envelope_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Envelope.type)
}

// int64 arrivalTime = 2;
void Envelope::clear_arrivaltime() {
  arrivaltime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Envelope::arrivaltime() const {
  // @@protoc_insertion_point(field_get:protocol.Envelope.arrivalTime)
  return arrivaltime_;
}
void Envelope::set_arrivaltime(::google::protobuf::int64 value) {
  
  arrivaltime_ = value;
  // @@protoc_insertion_point(field_set:protocol.Envelope.arrivalTime)
}

// int64 id = 3;
void Envelope::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Envelope::id() const {
  // @@protoc_insertion_point(field_get:protocol.Envelope.id)
  return id_;
}
void Envelope::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Envelope.id)
}

// repeated .protocol.Note note = 4;
int Envelope::note_size() const {
  return note_.size();
}
void Envelope::clear_note() {
  note_.Clear();
}
const ::protocol::Note& Envelope::note(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Envelope.note)
  return note_.Get(index);
}
::protocol::Note* Envelope::mutable_note(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Envelope.note)
  return note_.Mutable(index);
}
::protocol::Note* Envelope::add_note() {
  // @@protoc_insertion_point(field_add:protocol.Envelope.note)
  return note_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Note >*
Envelope::mutable_note() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Envelope.note)
  return &note_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Note >&
Envelope::note() const {
  // @@protoc_insertion_point(field_list:protocol.Envelope.note)
  return note_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Note::kIdFieldNumber;
const int Note::kNameFieldNumber;
const int Note::kCreationDateFieldNumber;
const int Note::kContentFieldNumber;
const int Note::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Note::Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_notes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Note)
}
Note::Note(const Note& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protocol.Note)
}

void Note::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  _cached_size_ = 0;
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:protocol.Note)
  SharedDtor();
}

void Note::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Note::descriptor() {
  protobuf_notes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Note& Note::default_instance() {
  protobuf_notes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Note* Note::New(::google::protobuf::Arena* arena) const {
  Note* n = new Note;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Note)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

bool Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Note)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.Note.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 creationDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creationdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.NoteType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::NoteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.Note.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Note)
  return false;
#undef DO_
}

void Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Note.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int64 creationDate = 3;
  if (this->creationdate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->creationdate(), output);
  }

  // .protocol.NoteType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Note.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.Note)
}

::google::protobuf::uint8* Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Note.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int64 creationDate = 3;
  if (this->creationdate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->creationdate(), target);
  }

  // .protocol.NoteType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Note.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Note)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 creationDate = 3;
  if (this->creationdate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creationdate());
  }

  // .protocol.NoteType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const Note* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Note)
    MergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.creationdate() != 0) {
    set_creationdate(from.creationdate());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  return true;
}

void Note::Swap(Note* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Note::InternalSwap(Note* other) {
  name_.Swap(&other->name_);
  content_.Swap(&other->content_);
  std::swap(id_, other->id_);
  std::swap(creationdate_, other->creationdate_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Note::GetMetadata() const {
  protobuf_notes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_notes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Note

// int64 id = 1;
void Note::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Note::id() const {
  // @@protoc_insertion_point(field_get:protocol.Note.id)
  return id_;
}
void Note::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Note.id)
}

// string name = 2;
void Note::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Note::name() const {
  // @@protoc_insertion_point(field_get:protocol.Note.name)
  return name_.GetNoArena();
}
void Note::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Note.name)
}
#if LANG_CXX11
void Note::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Note.name)
}
#endif
void Note::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Note.name)
}
void Note::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Note.name)
}
::std::string* Note::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Note.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Note::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Note.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Note::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Note.name)
}

// int64 creationDate = 3;
void Note::clear_creationdate() {
  creationdate_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Note::creationdate() const {
  // @@protoc_insertion_point(field_get:protocol.Note.creationDate)
  return creationdate_;
}
void Note::set_creationdate(::google::protobuf::int64 value) {
  
  creationdate_ = value;
  // @@protoc_insertion_point(field_set:protocol.Note.creationDate)
}

// string content = 5;
void Note::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Note::content() const {
  // @@protoc_insertion_point(field_get:protocol.Note.content)
  return content_.GetNoArena();
}
void Note::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Note.content)
}
#if LANG_CXX11
void Note::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Note.content)
}
#endif
void Note::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Note.content)
}
void Note::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Note.content)
}
::std::string* Note::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Note.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Note::release_content() {
  // @@protoc_insertion_point(field_release:protocol.Note.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Note::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:protocol.Note.content)
}

// .protocol.NoteType type = 4;
void Note::clear_type() {
  type_ = 0;
}
::protocol::NoteType Note::type() const {
  // @@protoc_insertion_point(field_get:protocol.Note.type)
  return static_cast< ::protocol::NoteType >(type_);
}
void Note::set_type(::protocol::NoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Note.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
